import argparse
import json
import os
from typing import Union, Optional
from src.images import (
    flatten,
    get_samples,
    open_image,
    draw_samples,
)
import src.color_conversions as color_conversions
import src.reference_charts as reference_charts
import src.optimizer as optimizer
import numpy as np
from scipy.optimize import minimize, OptimizeResult  # type:ignore


def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "reference_chart",
        type=str,
        help="File name of reference chart LAB txt description.",
    )
    parser.add_argument(
        "camera_chart",
        type=str,
        help="File name of a color chart shot on a camera, with the image already in scene linear.",
    )
    parser.add_argument(
        "--tall-chart",
        action="store_true",
        default=False,
        help="Set this flag to search for a portrait chart instead of a landscape one.",
    )
    parser.add_argument(
        "--target-gamut",
        default="DWG",
        const="DWG",
        nargs="?",
        choices=["DWG", "AP0"],
        help="Choose a target color space for the matrix (default: %(default)s)",
    )
    parser.add_argument(
        "--gamut-file",
        default=None,
        type=str,
        help="The path to your gamut file generated by gamut_solver.py. If None, assumes no transformation matrix and the camera_chart is already in the target gamut.",
    )
    parser.add_argument(
        "--correct-wb",
        action="store_true",
        default=False,
        help="Set this flag to have the program automatically compute the ideal white balance for your camera chart.",
    )
    args = parser.parse_args()

    # Identify target gamut of IDT
    target_gamut: color_conversions.Gamut
    if args.target_gamut == "DWG":
        target_gamut = color_conversions.GAMUT_DWG
    elif args.target_gamut == "AP0":
        target_gamut = color_conversions.GAMUT_AP0
    else:
        raise ValueError(f"Unexpected target_gamut {args.target_gamut}")

    # Identify the source gamut that's assumed for the source image.
    source_gamut: color_conversions.Gamut
    if args.gamut_file is None:
        source_gamut = target_gamut
    else:
        with open(args.gamut_file, "r", encoding="ascii") as json_file:
            items = json.load(json_file)
        source_gamut = color_conversions.Gamut(
            color_conversions.XYYChart(items["gamut"]["red"]),
            color_conversions.XYYChart(items["gamut"]["green"]),
            color_conversions.XYYChart(items["gamut"]["blue"]),
            color_conversions.XYYChart(items["gamut"]["white"]),
        )

    # Read Reference Chart
    reference_chart, patches = reference_charts.load_reference_chart(
        reference_charts.read_text_file(args.reference_chart)
    )
    if args.tall_chart:
        patches = max(patches), min(patches)
    else:
        patches = min(patches), max(patches)
    print(f"Expecting a chart of shape {patches}")

    # Read Source image.
    source_image = open_image(args.camera_chart)
    source_samples, sample_positions = get_samples(
        source_image, patches=patches, flat=True
    )

    # Preprocess source chart
    preprocessed_source_samples = source_samples.copy()
    source_chart = color_conversions.RGBChart(preprocessed_source_samples)

    # Chart Alignment step.
    print(
        "Make sure the selected area and the reference chips are correctly placed on the chart!"
    )
    draw_samples(
        source_image, source_chart, reference_chart, sample_positions, show=True
    )

    # Optimize
    parameters: optimizer.Parameters
    if args.correct_wb:
        parameters = optimizer.optimize_exp_wb(
            source_chart, reference_chart, source_gamut, target_gamut, verbose=True
        )
    else:
        parameters = optimizer.optimize_exp(
            source_chart, reference_chart, source_gamut, target_gamut, verbose=True
        )
    mat, exp, wb = parameters.matrix, parameters.exposure, parameters.white_balance

    # Measure results.
    print("Using matrix: ", mat.mat)
    print("exposure: ", exp)
    print("wb coefficients: ", [wb.mat[0, 0], wb.mat[1, 1], wb.mat[2, 2]])
    print(
        "Delta-E: ",
        reference_chart.compute_delta_e(
            optimizer.chart_pipeline(source_chart, exp, mat, wb)
            .convert_to_xyz(target_gamut.get_conversion_to_xyz())
            .chromatic_adaptation(
                target_gamut.white.convert_to_xyz(), color_conversions.STD_A
            )
            .convert_to_lab(color_conversions.STD_A)
        ),
    )

    gamut_to_display = target_gamut.get_conversion_to_gamut(
        color_conversions.GAMUT_REC709
    )
    draw_samples(
        optimizer.image_pipeline(source_image, exp, mat, wb) @ gamut_to_display.mat.T,
        optimizer.chart_pipeline(source_chart, exp, mat, wb).convert_to_rgb(
            gamut_to_display
        ),
        reference_chart,
        sample_positions,
        show=True,
    )


if __name__ == "__main__":
    main()
